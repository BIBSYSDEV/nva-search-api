AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  NVA Search Resources API and Handler

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    MemorySize: 1800
    Runtime: java17
    Architectures:
      - arm64
    Environment:
      Variables:
        SEARCH_INFRASTRUCTURE_API_URI: !Ref SearchInfrastructureApiUri
        SEARCH_INFRASTRUCTURE_AUTH_URI: !Ref SearchInfrastructureAuthUri
        COGNITO_URI: !Ref CognitoUri
        API_HOST: !Sub 'api.${CustomDomain}'
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  AwsRegion:
    Type: 'String'
    Description: AWS Region
    Default: ${AWS::Region}
  CognitoUri:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Reference to Cognito Auth URI
    Default: /NVA/CognitoUri
  CognitoAuthorizerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  SearchInfrastructureApiUri:
    Type: String
    Description: URI to external search infrastructure API (SWS).
    Default: 'https://api.sws.aws.sikt.no'
  SearchInfrastructureAuthUri:
    Type: String
    Description: URI to auth for external search infrastructure API (SWS).
    Default: 'https://sws-auth.auth.eu-west-1.amazoncognito.com'
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: search
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/EventsBusName
  EventBusArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/EventsBusArn
  ResourcesBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/PersistedEntriesBucketName
  EventsBucketsName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBucketName'
  KeyBatchesBucketName:
    Type: 'String'
    Default: 'key-batches'
    Description: Name of bucket for key batches
  MaxConcurrency:
    Type: String
    Description: Maximum capacity for provisioned concurrency
    Default: 10
  MinConcurrency:
    Type: String
    Description: Minimum capacity for provisioned concurrency
    Default: 1
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.
  ElasticSearchSize:
    Type: String
    Default: dummy-value

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  ReadOnlySearchInfrastructureRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readIdentitySecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:IdentityServiceSecret*'
        - PolicyName: readSearchInfrastructureSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:SearchInfrastructureCredentials*'

  SearchHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: readFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject*
                  - events:*
                Resource: '*'
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: readSearchInfrastructureSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:SearchInfrastructureCredentials*'

  NvaSearchApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: ./docs/openapi.yaml

  CustomCodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service: [ codedeploy.amazonaws.com ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda

  SearchTicketsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda for searching Tickets
      CodeUri: search-resources-api
      Handler: no.unit.nva.search.SearchTicketsHandler::handleRequest
      Runtime: java17
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Role: !GetAtt CustomCodeDeployServiceRole.Arn
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt ReadOnlySearchInfrastructureRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          COGNITO_HOST: !Ref CognitoUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
      Events:
        GetTickets:
          Type: Api
          Properties:
            Path: /tickets
            Method: get
            RestApiId: !Ref NvaSearchApi

  SearchResourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda for searching Resources
      CodeUri: search-resources-api
      Handler: no.unit.nva.search.SearchResourcesApiHandler::handleRequest
      Runtime: java17
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Role: !GetAtt CustomCodeDeployServiceRole.Arn
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt ReadOnlySearchInfrastructureRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        GetResources:
          Type: Api
          Properties:
            Path: /resources
            Method: get
            RestApiId: !Ref NvaSearchApi

  SearchAwsResourcesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda for searching Resources
      CodeUri: search-resources-api
      Handler: no.unit.nva.search2.ResourcePagedSearchHandlerAws::handleRequest
      Runtime: java17
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Role: !GetAtt CustomCodeDeployServiceRole.Arn
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt ReadOnlySearchInfrastructureRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        GetResources:
          Type: Api
          Properties:
            Path: /resources2
            Method: get
            RestApiId: !Ref NvaSearchApi

  SearchImportCandidatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-resources-api
      Handler: no.unit.nva.search.SearchImportCandidatesApiHandler::handleRequest
      Runtime: java17
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Role: !GetAtt CustomCodeDeployServiceRole.Arn
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Role: !GetAtt ReadOnlySearchInfrastructureRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
      Events:
        GetResources:
          Type: Api
          Properties:
            Path: /import-candidates
            Method: get
            RestApiId: !Ref NvaSearchApi


  SearchResourcesApiFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${SearchResourcesFunction}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: SearchResourcesFunctionAliaslive

  SearchResourcesApiFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref   SearchResourcesApiFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  SearchTicketsApiFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${SearchTicketsFunction}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: SearchTicketsFunctionAliaslive

  SearchTicketsApiFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SearchTicketsApiFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization


  NvaPublicationBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref NvaSearchApi
      Stage: !Ref NvaSearchApi.Stage

  # ------------------------------------------------------
  #  Setup for EventBridge trigger
  # ------------------------------------------------------

  TriggerExecutionRole:
    DependsOn:
      - ResourcesIndexerDLQ
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource:
                  - !Ref EventBusArn
                  - !GetAtt BatchIndexEventBus.Arn
                  - !GetAtt ResourcesIndexerDLQ.Arn
        - PolicyName: readFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - events:*
                Resource: '*'
        - PolicyName: readSearchInfrastructureSecret
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:SearchInfrastructureCredentials*'

  IndexResources:
    DependsOn:
      - ResourcesIndexerDLQ
      - TriggerExecutionRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.IndexResourceHandler::handleRequest
      Runtime: java17
      ReservedConcurrentExecutions: 32
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Environment:
        Variables:
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  topic: [ "PublicationService.ExpandedEntry.Persisted" ]

  BatchIndexEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !If
        - WithSuffix
        - !Join [ "-",[ "BatchIndexEventBus", !Ref Suffix ] ]
        - "BatchIndexEventBus"

  IndexImportCandidates:
    DependsOn:
      - ResourcesIndexerDLQ
      - TriggerExecutionRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.IndexImportCandidateHandler::handleRequest
      Runtime: java17
      ReservedConcurrentExecutions: 32
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Environment:
        Variables:
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  topic: [ "ImportCandidates.ExpandedDataEntry.Persisted" ]

  DeleteResources:
    DependsOn:
      - ResourcesIndexerDLQ
      - TriggerExecutionRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.DeleteResourceFromIndexHandler::handleRequest
      Runtime: java17
      ReservedConcurrentExecutions: 32
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  topic: [ "PublicationService.ExpandedEntry.Deleted" ]

  DeleteImportCandidates:
    DependsOn:
      - ResourcesIndexerDLQ
      - TriggerExecutionRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.DeleteImportCandidateFromIndexHandler::handleRequest
      Runtime: java17
      ReservedConcurrentExecutions: 32
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  topic: [ "ImportCandidates.ExpandedEntry.Deleted" ]


  ResourcesIndexerDLQ:
    Type: AWS::SQS::Queue

  EventBasedBatchIndex:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: batch-index
      Handler: no.unit.nva.search.EventBasedBatchIndexer::handleRequest
      Runtime: java17
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt SearchHandlerRole.Arn
      Events:
        BatchIndexEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt BatchIndexEventBus.Name
            Pattern:
              detail:
                topic: [ "SearchService.Index.Batch" ]
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          BATCH_INDEX_EVENT_BUS_NAME: !GetAtt BatchIndexEventBus.Name

  StartBatchIndexingButton:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: batch-index
      Handler: no.unit.nva.search.StartBatchIndexingHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt SearchHandlerRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          BATCH_INDEX_EVENT_BUS_NAME: !GetAtt BatchIndexEventBus.Name
          PERSISTED_RESOURCES_PATH: !Sub "s3://${ResourcesBucket}/resources"

  StartKeyBasedBatchHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: batch-index
      Handler: no.unit.nva.search.keybatch.StartKeyBasedBatchHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt SearchHandlerRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !GetAtt BatchIndexEventBus.Name
          EVENTS_BUCKET: !Ref EventsBucketsName
          TOPIC: 'SearchService.Index.KeyBasedBatch'

  GenerateKeyBatchesHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: batch-index
      Handler: no.unit.nva.search.keybatch.GenerateKeyBatchesHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt SearchHandlerRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !GetAtt BatchIndexEventBus.Name
          PERSISTED_RESOURCES_BUCKET: !Ref ResourcesBucket
          KEY_BATCHES_BUCKET: !Ref KeyBatchesBucket
          TOPIC: 'SearchService.Index.KeyBasedBatch'
      Events:
        BatchIndexEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt BatchIndexEventBus.Name
            Pattern:
              detail:
                topic: [ 'SearchService.Index.KeyBasedBatch' ]

  KeyBasedBatchIndexHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: batch-index
      Handler: no.unit.nva.search.keybatch.KeyBasedBatchIndexHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Timeout: 900
      Role: !GetAtt SearchHandlerRole.Arn
      Environment:
        Variables:
          TOPIC: 'SearchService.Index.IndexKeyBatch'
          PERSISTED_RESOURCES_BUCKET: !Ref ResourcesBucket
          KEY_BATCHES_BUCKET: !Sub '${KeyBatchesBucketName}-${AWS::AccountId}'
          EVENT_BUS: !GetAtt BatchIndexEventBus.Name
      Events:
        BatchIndexEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt BatchIndexEventBus.Name
            Pattern:
              detail:
                topic: [ 'SearchService.Index.IndexKeyBatch' ]

  InitHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda that creates all indices. Needs to be run manually from Test
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.InitHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Role: !GetAtt SearchHandlerRole.Arn

  ImportCandidatesInitHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda that creates importCandidates index. Needs to be run manually from Test
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.ImportCandidateInitHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Role: !GetAtt SearchHandlerRole.Arn

  DeleteIndicesHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda that deletes all indices. Needs to be run manually from Test
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.DeleteIndicesHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Role: !GetAtt SearchHandlerRole.Arn

  DeleteImportCandidateIndexHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda that deletes import candidates index. Needs to be run manually from Test
      CodeUri: indexing-handlers
      Handler: no.unit.nva.indexing.handlers.DeleteImportCandidateIndexHandler::handleRequest
      Runtime: java17
      MemorySize: 1024
      Role: !GetAtt SearchHandlerRole.Arn

  KeyBatchesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${KeyBatchesBucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter3Days
            Status: Enabled
            ExpirationInDays: 3

