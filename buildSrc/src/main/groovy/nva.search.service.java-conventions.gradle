plugins {
    id 'java-library'
    id 'pmd'
    id 'checkstyle'
    id 'jacoco-report-aggregation'
    id 'com.diffplug.spotless'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    testImplementation libs.bundles.testing
}

sourceSets {
    test {
        resources {
            srcDir file('src/test/java')
            exclude '**/*.java', '*/*.xml'
        }
    }
    check {
        resources {
            exclude '**/*.java', '*/*.xml'
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    violationRules {
        rule {
            excludes = [
                'search-commons',
            ]
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
        rule {
            includes = [
                'search-commons',
            ]
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.970
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.988
            }
        }
    }
    dependsOn jacocoTestReport
}

tasks.named('test', Test) {
    useJUnitPlatform()
    testLogging {
        events 'skipped', 'passed', 'failed'
    }
    //    environment "ALLOWED_ORIGIN", "*"
    finalizedBy jacocoTestReport
}

spotless {
    java {
        toggleOffOn() // Ignores sections between `spotless:off` / `spotless:on`
        googleJavaFormat().reflowLongStrings().formatJavadoc(true).reorderImports(true)
    }

    format 'misc', {
        target '.gitignore', '.gitattributes', '.editorconfig', '**/*.gradle'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
}

// Reformat project before build and test if needed
tasks.named('build').configure {
    dependsOn 'spotlessApply'
}

tasks.named('test').configure {
    dependsOn 'spotlessApply'
}

pmd {
    toolVersion = '7.5.0'
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    ruleSets = []
    ignoreFailures = false
    pmdMain {
        excludes = [
                '**/generated/.*'
        ]
    }
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()

    showViolations = true
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required
        html.required
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'utf-8'
}
