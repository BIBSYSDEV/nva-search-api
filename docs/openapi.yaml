openapi: 3.0.3
info:
  title: NVA Public Search API
  version: '0.2.0'
  description: Public search API for resources in NVA. The API is backed by Amazon OpenSearch and uses [OpenSearch query syntax](https://opensearch.org/docs/latest/opensearch/query-dsl/full-text/).
paths:
  /tickets:
    get:
      description: Listing of all tickets
      parameters:
        - in: query
          name: viewingScope
          description: 'Only return tickets with a resource owner in one of the selected organisation. Including their sub-units. Formated as a comma separated list of affiliations ids.'
          required: false
          schema:
            type: string
        - in: query
          name: excludeSubUnits
          description: 'Exclude sub-units of the given viewingScope.'
          required: false
          schema:
            type: boolean
        - in: query
          name: role
          description: "The role you have when getting tickets"
          required: false
          schema:
            type: string
            default: "curator"
            enum: [curator, creator]
        - in: query
          name: query
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start position from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of publications in response."
          required: false
          schema:
            type: string
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchTicketsFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketSearchResponse"

  /resources2:
    get:
      description: "Search for public available publications by given criteria"
      parameters:
      - in: query
        name: category
        description: "Returns documents with this category code, only one category code is allowed."
        example: "JournalArticle"
        required: false
        schema:
          $ref: "#/components/schemas/CategoryEnum"
      - in: query
        name: category_not
        description: "Returns documents without these category codes. Support list of Enums, seperated by space (+)."
        example: "JournalArticle"
        required: false
        schema:
          $ref: "#/components/schemas/CategoryEnum"
      - in: query
        name: category_should
        description: "Returns documents with these category codes. Support list of Enums, seperated by space (+)."
        example: "JournalArticle"
        required: false
        schema:
          $ref: "#/components/schemas/CategoryEnum"
      - in: query
        name: contributor_id
        description: "person id (URI)."
        required: false
        schema:
          type: string
      - in: query
        name: contributor
        description: "returns document with Author's name or person id(URI)."
        required: false
        schema:
          type: string
      - in: query
        name: contributor_not
        description: "returns document without Author's names or person ids(URI), seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: contributor_should
        description: "returns document with Author's names or person ids(URI), seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: created_before
        description: "Results created before and inclusive the given date, (yyyy-mm-dd)"
        example: "2005-03-17"
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: created_since
        description: "Results created since and inclusive the given date, (yyyy-mm-dd)
        "
        example: "2005-03-17"
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: doi
        description: "returns document with this DOI id"
        example: "10.1000/123456"
        required: false
        schema:
          type: string
      - in: query
        name: doi_not
        description: "returns document without these DOI ids, seperated by space (+)."
        example: "10.1000/123456"
        required: false
        schema:
          type: string
      - in: query
        name: doi_should
        description: "returns document with these DOI ids, seperated by space (+)."
        example: "10.1000/123456"
        required: false
        schema:
          type: string
      - in: query
        name: fields
        description: "'fields=all' will search all fields in documents, or you can specify a comma separated list of fields to search in."
        example: category,contributor,funding
        required: false
        schema:
          type: string
          enum: [all, category,contributor,created_before,created_since,doi,funding,funding_source,id,institution ,isbn,issn,orcid,modified_before,modified_since,project_code,published_before,published_since,title,unit,user,year_reported]
      - in: query
        name: funding
        description: "Funding source code e.g: NFR, and project_code together separated by ':'"
        example: "NFR:1234"
        required: false
        schema:
          type: string
      - in: query
        name: funding_source
        description: "returns document with this funding source code"
        example: "NFR"
        required: false
        schema:
          type: string
      - in: query
        name: funding_source_not
        description: "returns document without these funding source codes, seperated by space (+)."
        example: "NFR"
        required: false
        schema:
          type: string
      - in: query
        name: funding_source_should
        description: "returns document with these funding source codes, seperated by space (+)."
        example: "NFR"
        required: false
        schema:
          type: string
      - in: query
        name: id
        description: "returns document with the identifier (UUID)"
        required: false
        schema:
          type: string
      - in: query
        name: id_not
        description: "returns document without these identifiers (UUID), seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: id_should
        description: "returns document with these identifiers (UUID), seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: institution
        description: "returns document with Id, name or acronym of the institution the contributors belong to"
        example:  [185, UiO, University of Oslo]
        required: false
        schema:
          type: string
      - in: query
        name: institution_not
        description: "returns document without Ids, names or acronyms of the institution the contributors belong to, seperated by space (+)."
        example:  [185, UiO, University of Oslo]
        required: false
        schema:
          type: string
      - in: query
        name: institution_should
        description: "returns document with Ids, names or acronyms of the institution the contributors belong to, seperated by space (+)."
        example:  [185, UiO, University of Oslo]
        required: false
        schema:
          type: string
      - in: query
        name: isbn
        description: "returns document with this ISBN id"
        required: false
        schema:
          type: string
      - in: query
        name: isbn_not
        description: "returns document without these ISBN ids, seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: isbn_should
        description: "returns document with these ISBN ids, seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: issn
        description: "returns document with this issn"
        required: false
        schema:
          type: string
      - in: query
        name: issn_not
        description: "returns document without these issn, seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: issn_should
        description: "returns document with these issn, seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: orcid
        description: "returns document with this ORCID id"
        required: false
        schema:
          type: string
      - in: query
        name: orcid_not
        description: "returns document without these ORCID ids, seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        name: orcid_should
        description: "returns document with these ORCID ids, seperated by space (+)."
        required: false
        schema:
          type: string
      - in: query
        deprecated: true
        name: lang
        description: "Two letter language code. Using the 'lang' parameter, this is no longer in use, and are ignored"
        required: false
        schema:
          type: string
      - in: query
        name: modified_before
        description: "Results modified before and inclusive the given date, (yyyy-mm-dd)"
        example: "2005-03-17"
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: modified_since
        description: "Results modified since and inclusive the given date, (yyyy-mm-dd)"
        example: "2005-03-17"
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: order
        description: "SortOrder is either 'asc' or 'desc'. See Search and sort Default sort order is on 'cristin_result_id' in ascending order."
        example: "asc"
        required: false
        schema:
          type: string
          enum: [ asc, desc ]
      - in: query
        name: page
        description: "Page number, zero based, see from and size."
        example: "0"
        required: false
        schema:
          type: number
      - in: query
        name: from
        description: "Start result from item no. zero based [offset] is also accepted. Default is 0"
        example: "0"
        required: false
        schema:
          type: number
      - in: query
        name: size
        description: "Number of items returned. [per_page|perPage|results|limit] are also accepted.  Default is 15"
        example: "15"
        required: false
        schema:
          type: number
      - in: query
        name: project
        description: "returns document with this project id (URI)"
        example: "NFR"
        required: false
        schema:
          type: string
      - in: query
        name: project_not
        description: "returns document without these project ids (URI), seperated by space (+)."
        example: "NFR"
        required: false
        schema:
          type: string
      - in: query
        name: project_should
        description: "returns document with these project ids (URI), seperated by space (+)."
        example: "NFR"
        required: false
        schema:
          type: string
      - in: query
        name: published_before
        description: "Results published before and inclusive the given date, (yyyy-mm-dd)"
        example: "2005-03-17"
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: published_since
        description: "Results published since and inclusive the given date, (yyyy-mm-dd)"
        example: "2005-03-17"
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: query
        description: "free text search, all words are searched for in all fields, only documents containing all words are returned"
        required: false
        schema:
          type: string
      - in: query
        name: sort
        description: "Sorts on the given field. Default sort order is on 'published_date' in ascending order."
        required: false
        example: "category:asc,created_date:desc"
        schema:
          type: string
          enum:
            - category:asc
            - category:desc
            - created_date:asc
            - created_date:desc
            - modified_date:asc
            - modified_date:desc
            - published_date:asc
            - published_date:desc
            - title:asc
            - title:desc
            - unit_id:asc
            - unit_id:desc
      - in: query
        name: title
        description: "returns document with these words in the title"
        example: "covid-19"
        required: false
        schema:
          type: string
      - in: query
        name: title_not
        description: "returns document without these words in the title, seperated by space (+)."
        example: "covid-19"
        required: false
        schema:
          type: string
      - in: query
        name: title_should
        description: "returns document with any of these words in the title, seperated by space (+)."
        example: "covid-19"
        required: false
        schema:
          type: string
      - in: query
        name: unit
        description: "returns document with these words in the Id"
        example: 185.53.18.10
        required: false
        schema:
          type: string
      - in: query
        name: unit_not
        description: "returns document without these words in the Id, seperated by space (+)."
        example: 185.53.18.10
        required: false
        schema:
          type: string
      - in: query
        name: unit_should
        description: "returns document with any of these words in the Id, seperated by space (+)."
        example: 185.53.18.10
        required: false
        schema:
          type: string
      - in: query
        name: user
        description: "returns document with this resource owner (user id (URI))"
        example: "askeladd:185"
        required: false
        schema:
          type: string
      - in: query
        name: user_not
        description: "returns document without these resource owners (user id (URI)), seperated by space (+)."
        example: "askeladd:185"
        required: false
        schema:
          type: string
      - in: query
        name: user_should
        description: "returns document with any of these resource owners (user id (URI)), seperated by space (+)."
        example: "askeladd:185"
        required: false
        schema:
          type: string
      - in: query
        name: publication_year
        description: "returns document with this publication year"
        example: "2022"
        required: false
        schema:
          type: number
      - in: query
        name: publication_year_should
        description: "returns document with any of these publication years, seperated by space (+)."
        example: "2022 2023"
        required: false
        schema:
          type: number
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchAwsResourcesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedPublicationSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "500 info description"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /import-candidates2:
    get:
      description: "Search for import candidates by given criteria"
      parameters:
        - in: query
          name: query
          description: "Term to search for in import candidates."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start position from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of import candidates in response."
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchImportCandidatesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedImportCandidateSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /resources:
    get:
      description: "Search for public available publications by given criteria"
      tags:
        - external
      parameters:
        - in: query
          name: query
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start position from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of publications in response."
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchResourcesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicationSearchResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/PublicationSearchCsv"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "500 info description"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /import-candidates:
    get:
      description: "Search for import candidates by given criteria"
      parameters:
        - in: query
          name: query
          description: "Term to search for in import candidates."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start position from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of import candidates in response."
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchImportCandidatesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportCandidateSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

components:
  schemas:
    Publication:
      type: object
      description: Complete Publication entity
      properties:
        abstract:
          type: string
          description: short abstract of content
        alternativeTitles:
          type: array
          description: short abstract of content
          items:
            type: string
        contributors:
          type: array
          description: List of contributing people
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        description:
          type: string
        doi:
          type: string
        id:
          type: string
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
        publicationDate:
          type: object
          properties:
            day:
              type: string
            month:
              type: string
            type:
              type: string
            year:
              type: string
        publicationType:
          type: string
        publishedDate:
          type: string
          format: date
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        reference:
          type: object
          properties:
            doi:
              type: string
            publicationContext:
              type: object
              properties:
                level:
                  type: string
                linkedContext:
                  type: string
                onlineIssn:
                  type: string
                openAccess:
                  type: boolean
                peerReviewed:
                  type: boolean
                printIssn:
                  type: string
                publisher:
                  type: string
                seriesTitle:
                  type: string
                title:
                  type: string
                type:
                  type: string
                url:
                  type: string
            publicationInstance:
              type: object
              properties:
                articleNumber:
                  type: string
                issue:
                  type: string
                pages:
                  type: object
                  properties:
                    begin:
                      type: string
                    end:
                      type: string
                    illustrated:
                      type: boolean
                    pages:
                      type: string
                    type:
                      type: string
                peerReviewed:
                  type: boolean
                textbookContent:
                  type: boolean
                type:
                  type: string
                volume:
                  type: string
            type:
              type: string
        tags:
          type: array
          items:
            type: string
        title:
          type: string
    ImportCandidate:
      type: object
      description: Complete ImportCandidate entity
      properties:
        id:
          type: string
        additionalIdentifiers:
          type: array
          description: Additional identifiers as cristinId and scopusId
          items:
            type: string
        importStatus:
          type: string
          enum:
            - IMPORTED
            - NOT_IMPORTED
            - NOT_APPLICABLE
        doi:
          type: string
        publicationYear:
          type: string
        mainTitle:
          type: string
        totalContributors:
          type: integer
        totalVerifiedContributors:
          type: integer
        organization:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        journal:
          type: object
          properties:
            id:
              type: string
        publicationInstance:
          type: object
          properties:
            articleNumber:
              type: string
            issue:
              type: string
            pages:
              type: object
              properties:
                begin:
                  type: string
                end:
                  type: string
                illustrated:
                  type: boolean
                pages:
                  type: string
                type:
                  type: string
            peerReviewed:
              type: boolean
            textbookContent:
              type: boolean
            type:
              type: string
            volume:
              type: string
    Ticket:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
        viewedBy:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
      example:
        type: GeneralSupportCase
        viewedBy:
          - user1
          - user2
        status: Pending
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
    SearchResponse:
      type: object
      description: Search meta information, with results
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          $ref: '#/components/schemas/Id'
        processingTime:
          type: integer
          description: time consumed on server in ms.
        size:
          type: integer
          description: Number of results returned from query
        aggregations:
          type: object
          description: Entity containing the different facets hit by the search.
        total:
          type: integer
          description: Total number of results from query
        took:
          type: integer
          description: Time consumed on server in ms.
    TicketSearchResponse:
      allOf: # Combines SearchResponse with Ticket hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Ticket search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/Ticket'
    PublicationSearchResponse:
      allOf: # Combines SearchResponse with Publication hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Publication search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/Publication'
    PagedSearchResponse:
      type: object
      description: Search meta information, with results
      required:
        - '@context'
        - id
        - totalHits
      properties:
        id:
          $ref: '#/components/schemas/Id'
        totalHits:
          type: integer
          description: Total number of results from query
        hits:
          type: array
        nextResults:
          type: string
          pattern: 'https:\/\/.*$'
          description: Link to next page of results, null if this is the last page
        nextSearchAfterResults:
          type: string
          pattern: 'https:\/\/.*$'
          description: Link to next page of results, based on the sort key, null if this is the last page
        previousResults:
          type: string
          pattern: 'https:\/\/.*$'
          description: Link to previous page of results, null if this is the first page
        aggregations:
          type: object
          description: Entity containing the different facets hit by the search, null if response is beyond the first page.
        '@context':
          $ref: '#/components/schemas/Context'
    PagedPublicationSearchResponse:
      allOf: # Combines PagedSearchResponse with Publication hits
        - $ref: '#/components/schemas/PagedSearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Publication search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/Publication'
    PagedImportCandidateSearchResponse:
      allOf: # Combines PagedSearchResponse with ImportCandidate hits
        - $ref: '#/components/schemas/PagedSearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: ImportCandidate search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/ImportCandidate'
    PublicationSearchCsv:
      type: string
      description: Export publication search results
      properties:
        url:
          type: string
          description: Uri(id) of the publication
        title:
          type: string
          description: Title of the publication
        publicationDate:
          type: string
          description: Publication date
        type:
          type: string
          description: Publication instance
        contributors:
          type: string
          description: List of contributors of the publication
      example: |-
        url;title;publicationDate;type;contributors
        "https://example/publication";"Title";"2020-09-02";"AcademicArticle";"Rached Fristedt,Per Arnér"
    ImportCandidateSearchResponse:
      allOf: # Combines SearchResponse with ImportCandidate hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Import candidate search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/ImportCandidate'
    Context:
      type: string
      pattern: 'https:\/\/.*$'
      description: The JSON-LD context object for the data, which describes the object in the data and allows machine processing of the data at a semantic level
    Id:
      type: string
      pattern: 'https:\/\/.*$'
      description: The URI of the object ID
    CategoryEnum:
      type: string
      enum: [AcademicArticle,AcademicChapter,AcademicLiteratureReview,AcademicMonograph,Architecture,ArtisticDesign,BookAbstracts,BookAnthology,BookMonograph,CaseReport,ChapterArticle,
             ChapterConferenceAbstract,ChapterInReport,ConferenceAbstract,ConferenceLecture,ConferencePoster,ConferenceReport,DataManagementPlan,DataSet,DegreeBachelor,DegreeLicentiate,
             DegreeMaster,DegreePhd,Encyclopedia,EncyclopediaChapter,ExhibitionCatalog,ExhibitionCatalogChapter,ExhibitionProduction,FeatureArticle,Introduction,JournalArticle,JournalCorrigendum,
             JournalInterview,JournalIssue,JournalLeader,JournalLetter,JournalReview,Lecture,LiteraryArts,MediaBlogPost,MediaFeatureArticle,MediaInterview,MediaParticipationInRadioOrTv,
             MediaReaderOpinion,MovingPicture,MusicPerformance,NonFictionChapter,NonFictionMonograph,OtherPresentation,OtherStudentWork,PerformingArts,PopularScienceArticle,PopularScienceChapter,
             PopularScienceMonograph,ProfessionalArticle,ReportBasic,ReportBookOfAbstract,ReportPolicy,ReportResearch,ReportWorkingPaper,StudyProtocol,Textbook,TextbookChapter,VisualArts]
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref:
              CognitoAuthorizerArn
