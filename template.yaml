AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    NVA Search Resources API and Handler

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaSearchAPI
    Description: NVA API for searching public resources in AWS ElasticSearch
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${GIT_REPO}', '${CODEBUILD_RESOLVED_SOURCE_VERSION}', '@${BUILD_TIMESTAMP}']

Globals:
  Function:
    Timeout: 20

Parameters:
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
  ResourcesTableStreamArn:
    Type: String
    Description: ARN of the stream containg dynamodb events

Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  ReadOnlyAccessElasticSearchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'

  ReadOnlyAccessS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: readDynamodbBackupsFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: '*'
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: writetoelasticsearch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'

  NVAElasticSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt TriggerExecutionRole.Arn
            Action: 'es:*'
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt ReadOnlyAccessElasticSearchRole.Arn
            Action:
              - es:ESHttpPost
              - es:ESHttpGet
              - es:ESHttpHead
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        ZoneAwarenessEnabled: false
        InstanceType: t2.small.elasticsearch
      ElasticsearchVersion: '7.9'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      CognitoOptions:
        Enabled: false

  NvaSearchApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: NVA Public Search API
          version: '0.1.0'
        paths:
          /resources:
            get:
              description: "Search for public available publications by given criteria"
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: query
                  name: query
                  description: "term to search for in resource."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: orderBy
                  description: "Field to order result by."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: sortOrder
                  description: "Order of search results (asc or desc)."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: from
                  description: "Start posision from results, 0-based."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: results
                  description: "Maximum number of publications in response."
                  required: false
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaSearchResourcesApiFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: "OK"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Publication'
                '500':
                  description: "Internal Server Error"
                  content:
                    application/json:
                      schema:
                        $ref: '#/definitions/Problem'

        definitions:
          Publication:
            type: object
          Problem:
            type: object
            description: Internal Server Error is logged
            properties:
              title:
                type: string
              status:
                type: integer
              detail:
                type: string
              requestId:
                type: string


  NvaSearchLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nva-search-layer
      Description: NVA Search common libraries
      ContentUri: search-commons/build/distributions/search-commons.zip
      CompatibleRuntimes:
        - java11
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain


  NvaSearchResourcesApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-resources-api
      Handler: no.unit.nva.search.SearchResourcesApiHandler::handleRequest
      Layers:
        - !Ref NvaSearchLayer
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt ReadOnlyAccessElasticSearchRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          ELASTICSEARCH_ENDPOINT_ADDRESS: !GetAtt NVAElasticSearch.DomainEndpoint
          ELASTICSEARCH_ENDPOINT_INDEX: resources
          ELASTICSEARCH_REGION: !Ref "AWS::Region"
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /resources
            Method: get
            RestApiId: !Ref NvaSearchApi

  NvaListLatestResourcesApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-resources-api
      Handler: no.unit.nva.search.ListLatestResourcesApiHandler::handleRequest
      Layers:
        - !Ref NvaSearchLayer
      Runtime: java11
      MemorySize: 1408
      Role: !GetAtt ReadOnlyAccessElasticSearchRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          ELASTICSEARCH_ENDPOINT_ADDRESS: !GetAtt NVAElasticSearch.DomainEndpoint
          ELASTICSEARCH_ENDPOINT_INDEX: resources
          ELASTICSEARCH_REGION: !Ref "AWS::Region"
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref NvaSearchApi


  NvaPublicationBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref NvaSearchApi
      Stage: !Ref NvaSearchApi.Stage

# ------------------------------------------------------
#  Setup for DynamoDB trigger
# ------------------------------------------------------

  TriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: ReadDynamoDBStreams
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:ListStreams
                Resource: !Sub "arn:aws:dynamodb:*:${AWS::AccountId}:table/*/stream/*"

  ReadDynamoDBStreamsTrigger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-resources-api
      Handler: no.unit.nva.dynamodb.DynamoDBStreamHandler::handleRequest
      Layers:
        - !Ref NvaSearchLayer
      Runtime: java11
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Environment:
        Variables:
          ELASTICSEARCH_ENDPOINT_ADDRESS: !GetAtt NVAElasticSearch.DomainEndpoint
          ELASTICSEARCH_ENDPOINT_INDEX: resources
          ELASTICSEARCH_REGION: !Ref "AWS::Region"

  TriggerLambdaMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !Ref ResourcesTableStreamArn
      FunctionName: !Ref ReadDynamoDBStreamsTrigger
      StartingPosition: LATEST
