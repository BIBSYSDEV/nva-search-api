AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  NVA Search Resources API and Handler

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaSearchAPI
    Description: NVA API for searching public resources in AWS ElasticSearch
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: [ '${GIT_REPO}', '${CODEBUILD_RESOLVED_SOURCE_VERSION}', '@${BUILD_TIMESTAMP}' ]

Globals:
  Function:
    Timeout: 20

Parameters:
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: nvaEventBusName
  EventBusArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: nvaEventBusArn
  MaxConcurrency:
    Type: String
    Description: Maximum capacity for provisioned concurrency
    Default: 10
  MinConcurrency:
    Type: String
    Description: Minimum capacity for provisioned concurrency
    Default: 1
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]


Resources:
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  ReadOnlyAccessElasticSearchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'

  ReadOnlyAccessS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: readDynamodbBackupsFromS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: '*'
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: writetoelasticsearch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpPost
                Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'

  NVAElasticSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt TriggerExecutionRole.Arn
            Action: 'es:*'
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
          - Effect: Allow
            Principal:
              AWS: !GetAtt ReadOnlyAccessElasticSearchRole.Arn
            Action:
              - es:ESHttpPost
              - es:ESHttpGet
              - es:ESHttpHead
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*'
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: true
#        DedicatedMasterCount: 1
        DedicatedMasterType: t2.small.elasticsearch
#        InstanceCount: 1
        ZoneAwarenessEnabled: false
        InstanceType: t2.small.elasticsearch
#      ElasticsearchVersion: '7.9'
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      CognitoOptions:
        Enabled: false

  NvaSearchApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: NVA Public Search API
          version: '0.2.0'
          description: |-
            Public search API for resources in NVA. The API is backed by Amazon ElasticSearch and uses [ElasticSearch query syntax](https://opendistro.github.io/for-elasticsearch-docs/docs/elasticsearch/full-text/).
            ## Path Parameters
            * **query** - a string containing a valid elasticrsearch query expression
            * **orderBy** - Indexed field to order results by
            * **sortOrder** - The order defaults to *desc* when sorting on the _score, and defaults to *asc* when sorting on anything else.
            * **from** - starting position of result
            * **results** - integer number of results returned
        paths:
          /resources:
            get:
              description: "Search for public available publications by given criteria"
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: query
                  name: query
                  description: "Term to search for in resource."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: orderBy
                  description: "Field to order result by."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: sortOrder
                  description: "Order of search results (asc or desc)."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: from
                  description: "Start posision from results, 0-based."
                  required: false
                  schema:
                    type: string
                - in: query
                  name: results
                  description: "Maximum number of publications in response."
                  required: false
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaSearchResourcesApiFunction.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: "OK"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Publication"
                "400":
                  description: Bad Request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Problem"
                "404":
                  description: Not Found
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Problem"
                "500":
                  info:
                    description: "500 info description"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Problem"
        components:
          schemas:
            Publication:
              type: object
              description: Structure returned from successful seach
              properties:
                abstract:
                  type: string
                  description: short abstract of content
                alternativeTitles:
                  type: array
                  description: short abstract of content
                  items:
                    type: string
                contributors:
                  type: array
                  description: List of contributing people
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                description:
                  type: string
                doi:
                  type: string
                id:
                  type: string
                modifiedDate:
                  type: string
                  format: date
                owner:
                  type: string
                publicationDate:
                  type: object
                  properties:
                    day:
                      type: string
                    month:
                      type: string
                    type:
                      type: string
                    year:
                      type: string
                publicationType:
                  type: string
                publishedDate:
                  type: string
                  format: date
                publisher:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                reference:
                  type: object
                  properties:
                    doi:
                      type: string
                    publicationContext:
                      type: object
                      properties:
                        level:
                          type: string
                        linkedContext:
                          type: string
                        onlineIssn:
                          type: string
                        openAccess:
                          type: boolean
                        peerReviewed:
                          type: boolean
                        printIssn:
                          type: string
                        publisher:
                          type: string
                        seriesTitle:
                          type: string
                        title:
                          type: string
                        type:
                          type: string
                        url:
                          type: string
                    publicationInstance:
                      type: object
                      properties:
                        articleNumber:
                          type: string
                        issue:
                          type: string
                        pages:
                          type: object
                          properties:
                            begin:
                              type: string
                            end:
                              type: string
                            illustrated:
                              type: boolean
                            pages:
                              type: string
                            type:
                              type: string
                        peerReviewed:
                          type: boolean
                        textbookContent:
                          type: boolean
                        type:
                          type: string
                        volume:
                          type: string
                    type:
                      type: string
                tags:
                  type: array
                  items:
                    type: string
                title:
                  type: string
            Problem:
              type: object
              description: Problem object model
              properties:
                title:
                  type: string
                  description: Title
                status:
                  type: integer
                  description: Kind of problem
                detail:
                  type: string
                  description: details of problem
                requestId:
                  type: string
                  description: Identifier of the request causing the problem
  NvaSearchLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nva-search-layer
      Description: NVA Search common libraries
      ContentUri: search-commons/build/distributions/search-commons.zip
      CompatibleRuntimes:
        - java11
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain


  NvaSearchResourcesApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-resources-api
      Handler: no.unit.nva.search.SearchResourcesApiHandler::handleRequest
      Layers:
        - !Ref NvaSearchLayer
      Runtime: java11
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Timeout: 10
      Role: !GetAtt ReadOnlyAccessElasticSearchRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          ELASTICSEARCH_ENDPOINT_ADDRESS: !GetAtt NVAElasticSearch.DomainEndpoint
          ELASTICSEARCH_ENDPOINT_INDEX: resources
          ELASTICSEARCH_REGION: !Ref "AWS::Region"
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /resources
            Method: get
            RestApiId: !Ref NvaSearchApi


  SearchResourcesApiFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${NvaSearchResourcesApiFunction}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: NvaSearchResourcesApiFunctionAliaslive

  SearchResourcesApiFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref SearchResourcesApiFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization


  ReadDatafilesInBucketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: batch-index
      Handler: no.unit.nva.search.ImportToSearchIndexHandler::handleRequest
      Layers:
        - !Ref NvaSearchLayer
      Runtime: java11
      MemorySize: 1408
      Timeout: 900
      Role: !GetAtt ReadOnlyAccessS3Role.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          ELASTICSEARCH_ENDPOINT_ADDRESS: !GetAtt NVAElasticSearch.DomainEndpoint
          ELASTICSEARCH_ENDPOINT_INDEX: resources
          ELASTICSEARCH_REGION: !Ref "AWS::Region"
          S3BUCKET_REGION: !Ref "AWS::Region"


  NvaPublicationBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref NvaSearchApi
      Stage: !Ref NvaSearchApi.Stage

  # ------------------------------------------------------
  #  Setup for EventBridge trigger
  # ------------------------------------------------------

  TriggerExecutionRole:
    DependsOn:
      - ResourcesIndexerDLQ
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: Events
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:*
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                Resource:
                  - !Ref EventBusArn
                  - !GetAtt ResourcesIndexerDLQ.Arn

  IndexResources:
    DependsOn:
      - ResourcesIndexerDLQ
      - TriggerExecutionRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-resources-dynamodb-trigger
      Handler: no.unit.nva.publication.PublicationUpdateEventHandler::handleRequest
      Layers:
        - !Ref NvaSearchLayer
      Runtime: java11
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Environment:
        Variables:
          ELASTICSEARCH_ENDPOINT_ADDRESS: !GetAtt NVAElasticSearch.DomainEndpoint
          ELASTICSEARCH_ENDPOINT_INDEX: resources
          ELASTICSEARCH_REGION: !Ref "AWS::Region"
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  type: [ "publication.update" ]
                  newPublication:
                    type: [ "Publication" ]
                    identifier: [ { "exists": true } ]
                    status: [ "PUBLISHED", "Published" ] # For now operate only Published resources
                    doiRequest:
                      type: [ "exists": false ] #ignore doi requests.
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt ResourcesIndexerDLQ.Arn

  DeleteResources:
    DependsOn:
      - ResourcesIndexerDLQ
      - TriggerExecutionRole
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-resources-dynamodb-trigger
      Handler: no.unit.nva.publication.PublicationUpdateEventHandler::handleRequest
      Layers:
        - !Ref NvaSearchLayer
      Runtime: java11
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      Environment:
        Variables:
          ELASTICSEARCH_ENDPOINT_ADDRESS: !GetAtt NVAElasticSearch.DomainEndpoint
          ELASTICSEARCH_ENDPOINT_INDEX: resources
          ELASTICSEARCH_REGION: !Ref "AWS::Region"
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName:
              Ref: EventBusName
            Pattern:
              detail-type:
                - Lambda Function Invocation Result - Success
              detail:
                responsePayload:
                  type: [ "publication.update" ]
                  newPublication:
                    identifier: [ { "exists": false } ]
                  oldPublication:
                    type: [ "Publication" ]
                    identifier: [ { "exists": true } ]
                    status: [ "PUBLISHED", "Published" ] # For now operate only Published resources
                    doiRequest:
                      type: [ "exists": false ] #ignore doi requests.
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !Ref EventBusArn
          OnFailure:
            Type: SQS
            Destination: !GetAtt ResourcesIndexerDLQ.Arn

  ResourcesIndexerDLQ:
    Type: AWS::SQS::Queue
