openapi: 3.0.3
info:
  title: NVA Public Search API
  version: '0.2.0'
  description: Public search API for resources in NVA. The API is backed by Amazon OpenSearch and uses [OpenSearch query syntax](https://opensearch.org/docs/latest/opensearch/query-dsl/full-text/).
paths:
  /tickets:
    get:
      description: Listing of all tickets
      parameters:
        - in: query
          name: role
          description: "The role you have when getting tickets"
          required: false
          schema:
            type: string
            default: "curator"
            enum: [curator, creator]
        - in: query
          name: query
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start position from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of publications in response."
          required: false
          schema:
            type: string
        - in: query
          name: viewingScope
          description: "List tickets for this organization."
          required: false
          schema:
            type: string
            format: uri
            example: "https://api.dev.nva.aws.unit.no/cristin/organization/194.0.0.0"
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchTicketsFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketSearchResponse"

  /resources:
    get:
      description: "Search for public available publications by given criteria"
      tags:
        - external
      parameters:
        - in: query
          name: query
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start position from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of publications in response."
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchResourcesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicationSearchResponse"
            text/csv:
              schema:
                $ref: "#/components/schemas/PublicationSearchCsv"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "500 info description"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /resources2:
    get:
      description: "Search for public available publications by given criteria"
      tags:
        - external
      parameters:
        - in: query
          name: category
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: contributor
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: created_before
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: created_since
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: doi
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: fields
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: funding
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: funding_source
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: id
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: institution
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: issn
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: lang
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: modified_before
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: modified_since
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: order
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: page
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: per_page
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: project_code
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: published_before
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: published_since
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: query
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: sort
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: title
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: unit
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: user
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
        - in: query
          name: year_reported
          description: "Term to search for in resource."
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchSwsResourcesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedPublicationSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "500 info description"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"


  /resources3:
    get:
      description: "Search for public available publications by given criteria"
      tags:
        - external
      parameters:
      - in: query
        name: category
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: contributor
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: created_before
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: created_since
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: doi
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: fields
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: funding
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: funding_source
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: id
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: institution
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: issn
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: lang
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: modified_before
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: modified_since
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: order
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: page
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: per_page
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: project_code
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: published_before
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: published_since
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: query
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: sort
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: title
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: unit
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: user
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      - in: query
        name: year_reported
        description: "Term to search for in resource."
        required: false
        schema:
          type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchAwsResourcesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedPublicationSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "500 info description"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

  /import-candidates:
    get:
      description: "Search for import candidates by given criteria"
      parameters:
        - in: query
          name: query
          description: "Term to search for in import candidates."
          required: false
          schema:
            type: string
        - in: query
          name: orderBy
          description: "Field to order result by."
          required: false
          schema:
            type: string
        - in: query
          name: sortOrder
          description: "Order of search results (asc or desc)."
          required: false
          schema:
            type: string
        - in: query
          name: from
          description: "Start position from results, 0-based."
          required: false
          schema:
            type: string
        - in: query
          name: results
          description: "Maximum number of import candidates in response."
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchImportCandidatesFunction.Arn}:live/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportCandidateSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: "Internal server error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

components:
  schemas:
    Publication:
      type: object
      description: Complete Publication entity
      properties:
        abstract:
          type: string
          description: short abstract of content
        alternativeTitles:
          type: array
          description: short abstract of content
          items:
            type: string
        contributors:
          type: array
          description: List of contributing people
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
        description:
          type: string
        doi:
          type: string
        id:
          type: string
        modifiedDate:
          type: string
          format: date
        owner:
          type: string
        publicationDate:
          type: object
          properties:
            day:
              type: string
            month:
              type: string
            type:
              type: string
            year:
              type: string
        publicationType:
          type: string
        publishedDate:
          type: string
          format: date
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        reference:
          type: object
          properties:
            doi:
              type: string
            publicationContext:
              type: object
              properties:
                level:
                  type: string
                linkedContext:
                  type: string
                onlineIssn:
                  type: string
                openAccess:
                  type: boolean
                peerReviewed:
                  type: boolean
                printIssn:
                  type: string
                publisher:
                  type: string
                seriesTitle:
                  type: string
                title:
                  type: string
                type:
                  type: string
                url:
                  type: string
            publicationInstance:
              type: object
              properties:
                articleNumber:
                  type: string
                issue:
                  type: string
                pages:
                  type: object
                  properties:
                    begin:
                      type: string
                    end:
                      type: string
                    illustrated:
                      type: boolean
                    pages:
                      type: string
                    type:
                      type: string
                peerReviewed:
                  type: boolean
                textbookContent:
                  type: boolean
                type:
                  type: string
                volume:
                  type: string
            type:
              type: string
        tags:
          type: array
          items:
            type: string
        title:
          type: string
    ImportCandidate:
      type: object
      description: Complete ImportCandidate entity
      properties:
        id:
          type: string
        additionalIdentifiers:
          type: array
          description: Additional identifiers as cristinId and scopusId
          items:
            type: string
        importStatus:
          type: string
          enum:
            - IMPORTED
            - NOT_IMPORTED
            - NOT_APPLICABLE
        doi:
          type: string
        publicationYear:
          type: string
        mainTitle:
          type: string
        totalContributors:
          type: integer
        totalVerifiedContributors:
          type: integer
        organization:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              labels:
                type: object
                additionalProperties:
                  type: string
        publisher:
          type: object
          properties:
            id:
              type: string
            name:
              type: string
        journal:
          type: object
          properties:
            id:
              type: string
        publicationInstance:
          type: object
          properties:
            articleNumber:
              type: string
            issue:
              type: string
            pages:
              type: object
              properties:
                begin:
                  type: string
                end:
                  type: string
                illustrated:
                  type: boolean
                pages:
                  type: string
                type:
                  type: string
            peerReviewed:
              type: boolean
            textbookContent:
              type: boolean
            type:
              type: string
            volume:
              type: string
    Ticket:
      type: object
      properties:
        type:
          type: string
          enum:
            - DoiRequest
            - PublishingRequest
            - GeneralSupportCase
        viewedBy:
          type: array
          items:
            type: string
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Closed
      example:
        type: GeneralSupportCase
        viewedBy:
          - user1
          - user2
        status: Pending
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
    SearchResponse:
      type: object
      description: Search meta information, with results
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        id:
          $ref: '#/components/schemas/Id'
        processingTime:
          type: integer
          description: time consumed on server in ms.
        size:
          type: integer
          description: Number of results returned from query
        aggregations:
          type: object
          description: Entity containing the different facets hit by the search.
        total:
          type: integer
          description: Total number of results from query
        took:
          type: integer
          description: Time consumed on server in ms.
    TicketSearchResponse:
      allOf: # Combines SearchResponse with Ticket hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Ticket search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/Ticket'
    PublicationSearchResponse:
      allOf: # Combines SearchResponse with Publication hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Publication search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/Publication'
    PagedPublicationSearchResponse:
      allOf: # Combines PublicationSearchResponse with paging information
        - $ref: '#/components/schemas/PublicationSearchResponse'
        - type: object
          required:
            - nextResults
            - previousResults
          properties:
            nextResults:
              type: string
              description: Link to next page of results, null if this is the last page
            previousResults:
              type: string
              description: Link to previous page of results, null if this is the first page
    PublicationSearchCsv:
      type: string
      description: Export publication search results
      properties:
        url:
          type: string
          description: Uri(id) of the publication
        title:
          type: string
          description: Title of the publication
        publicationDate:
          type: string
          description: Publication date
        type:
          type: string
          description: Publication instance
        contributors:
          type: string
          description: List of contributors of the publication
      example: |-
        url;title;publicationDate;type;contributors
        "https://example/publication";"Title";"2020-09-02";"AcademicArticle";"Rached Fristedt,Per Arnér"
    ImportCandidateSearchResponse:
      allOf: # Combines SearchResponse with ImportCandidate hits
        - $ref: '#/components/schemas/SearchResponse'
        - type: object
          required:
            - hits
          properties:
            hits:
              type: array
              description: Import candidate search results (numberOf = [size])
              items:
                $ref: '#/components/schemas/ImportCandidate'
    Context:
      type: string
      pattern: 'https:\/\/.*$'
      description: The JSON-LD context object for the data, which describes the object in the data and allows machine processing of the data at a semantic level
    Id:
      type: string
      pattern: 'https:\/\/.*$'
      description: The URI of the object ID
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref:
              CognitoAuthorizerArn
